#!/usr/bin/env python

from gi.repository import Cdn, GObject
import sys, tempfile, json, os

code = sys.stdin.read()

tmp = tempfile.NamedTemporaryFile()
tmp.write(code)
tmp.flush()

network = Cdn.Network()

try:
    network.load_from_path(tmp.name)
except Exception as e:
    ctx = network.get_parser_context()
    [lstart, lend, cstart, cend, f] = ctx.get_error_location()

    ret = {
        'status': 'error',
        'error': {
            'line': (lstart, lend),
            'column': (cstart, cend),
            'message': str(e).replace(os.path.basename(tmp.name), '<file>'),
        }
    }

    print(json.dumps(ret))
    sys.exit(0)

def bases(obj):
    cls = obj.__class__
    ret = []

    while not cls is GObject.Object:
        name = cls.__name__.lower()

        if len(ret) == 0 or ret[0] != name:
            ret.insert(0, name)

        cls = cls.__base__

    return ret

def scan(obj):
    ret = {
        'id': obj.get_id(),
        'x': obj.props.x,
        'y': obj.props.y,
        'type': bases(obj),
        'variables': [v.get_name() for v in obj.get_variables()],
    }

    if isinstance(obj, Cdn.Node):
        ret['children'] = [scan(child) for child in obj.get_children()]

    if isinstance(obj, Cdn.Edge):
        if obj.props.input is None:
            ret['input'] = None
        else:
            ret['input'] = obj.props.input.get_id()

        if obj.props.output is None:
            ret['output'] = None
        else:
            ret['output'] = obj.props.output.get_id()

    return ret

topobj = scan(network)

print(json.dumps({
    'status': 'ok',
    'network': topobj,
}))

# vi:ts=4:et
